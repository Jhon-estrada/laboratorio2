#include<iostream>
#include <math.h>
using namespace std;


class complejo{
  private:
  double real_part;
  double img_part;
  public:
  complejo();
  complejo(float r = 0, float i = 0);

  complejo(const complejo&);
  //~complejo();
  void recibe();
  void impresion();
  float real();
  float imaginaria();
  
  
  
  
  complejo operator ~();
  friend ostream & operator << (ostream &out, const complejo &c);
  friend istream & operator >> (istream &in,  complejo &c);
  friend complejo operator + (const complejo &p1,const complejo &p2);
  friend complejo operator - (const complejo &p1,const complejo &p2);
  friend complejo operator * (const complejo &p1,const complejo &p2);
  friend complejo operator / (const complejo &p1,const complejo &p2);
};
complejo complejo::operator ~ ()
{
  img_part*=-1;
  return *this;
}
complejo operator + (const complejo &p1,const complejo &p2)
{
  complejo c3(p1.real_part+p2.real_part,p1.img_part+p2.img_part);
  return c3;
}
complejo operator - (const complejo &p1,const complejo &p2)
{
  complejo c3(p1.real_part-p2.real_part,p1.img_part-p2.img_part);
  return c3;
}

complejo operator * (const complejo &p1,const complejo &p2)
{
  complejo c3((p1.real_part*p2.real_part)-(p1.img_part*p2.img_part),(p1.real_part*p2.img_part)+(p1.img_part*p2.real_part));
  return c3;
}
complejo operator / (const complejo &p1,const complejo &p2)
{
  complejo c3((p1.real_part*p2.real_part)+(p1.img_part*p2.real_part),(p1.img_part*p2.real_part)-(p1.real_part*p2.img_part)/(p2.real_part^2+p2.img_part));
  return c3;
}

complejo::complejo(const complejo&a){
  real_part = a.real_part;
  img_part = a.img_part;

}
complejo::complejo(float a, float b){
  real_part = a;
  img_part = b;

}
void complejo::recibe()
   {
   cout << "\nIntroduzca la parte real del numero: " << endl;
   cin >> real_part;
   cout << "\nIntroduzca la parte compleja del numero: " << endl;
   cin >> img_part;
   }

   float complejo::real()
  {
   return real_part;
  }

  float complejo::imaginaria()

  {
   return img_part;
  }




ostream & operator << (ostream &out, const complejo &c)
{
    out << c.real_part;
    out <<"+i" << c.img_part << endl;
    return out;
}
istream & operator >> (istream &in,  complejo &c)
{
    //cout << "ingresar parte real ";
    in >> c.real_part;
    //cout << "ingresar parte imaginaria ";
    in >> c.img_part;
    return in;
}



int main(){

  complejo c1(1,2);
  complejo c2(3,4);
  //cin >> c1;
  cout << "el objeto complejo es: ";
  cout << c1;
  complejo c3=c1+c2;

  cout << "el objeto complejo es: ";
  cout << c3;
  cout << "el objeto complejo conjugado es: ";
  cout << ~c3;
  return 0;


}
